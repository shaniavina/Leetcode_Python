# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def lowestCommonAncestor(self, root, p, q):
        """
        :type root: TreeNode
        :type p: TreeNode
        :type q: TreeNode
        :rtype: TreeNode
        """
        ###iteratively
        parent = {root:None}
        stk = [root]
        while p not in parent or q not in parent:
            node = stk.pop()
            if node.left:
                parent[node.left] = node
                stk.append(node.left)
            if node.right:
                parent[node.right] = node
                stk.append(node.right)
        ancestor = set()
        while p:
            ancestor.add(p)
            p = parent[p]
        while q not in ancestor:
            q = parent[q]
        return q
        
        
        
        
        
#         ####amazing
#         if root in (None, p, q):
#             return root
#         left = self.lowestCommonAncestor(root.left, p, q)
#         right = self.lowestCommonAncestor(root.right, p, q)
        
#         if left and right:
#             return root
#         else:
#             return left or right
    
        
